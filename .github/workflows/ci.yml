name: "Run Unit Tests"
on:
  push:
    branches:
      - "merge-updates"

jobs:
  test:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: "Install Python 3"
        uses: "actions/setup-python@v2"

      - uses: "syphar/restore-virtualenv@v1"
        id: "cache-virtualenv"

      - name: "Setup Virtual Environment"
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: "Cache BfRuntime Protobuf"
        id: "cache-bfrt-protobuf"
        uses: "actions/cache@v2"
        with:
            path: "gen-py"
            key: ${{ runner.os }}-bfrt-protobuf-${{ hashFiles('requirements.txt') }}

      - name: "Clone Google Common Protos"
        if: steps.cache-bfrt-protobuf.outputs.cache-hit != 'true'
        uses: "actions/checkout@v2"
        with:
          repository: "googleapis/api-common-protos"
          path: "api-common-protos"
          clean: false

      - name: "Generate BfRuntime Protobuf"
        if: steps.cache-bfrt-protobuf.outputs.cache-hit != 'true'
        run: |
          mkdir -p gen-py
          python -m grpc_tools.protoc \
            --proto_path=${{ github.workspace }}/proto \
            --proto_path=${{ github.workspace }}/api-common-protos \
            --python_out=${{ github.workspace }}/gen-py \
            --grpc_python_out=./gen-py \
                ${{ github.workspace }}/proto/bfruntime.proto

      - name: "Install Bfrt Helper"
        run: |
          pip install -e .

      - name: "Run Tests"
        env:
          PYTHONPATH: ${{ github.workspace }}/gen-py
        run:
          python -m pytest -v --cov=bfrt_helper --cov-report html
      - name: "Save Coverage Report"
        uses: actions/upload-artifact@v2
        with:
          name: "coverage-report"
          path: "htmlcov"

  lint:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 0

      - name: "Install Python 3"
        uses: "actions/setup-python@v2"

      - uses: "syphar/restore-virtualenv@v1"
        id: "cache-virtualenv"


      - name: "Setup Virtual Environment"
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: "Lint Code Base"
        uses: "github/super-linter@v4"
      # - name: "Run linters"
      #   uses: "wearerequired/lint-action@v1"
      #   with:
      #     black: true
      #     flake8: true